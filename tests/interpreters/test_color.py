from typing import List, Optional, Tuple

from pytest import mark, raises

from ansiscape.enums import NamedColor
from ansiscape.exceptions import AttributeError
from ansiscape.interpreters.color import ColorInterpreter
from ansiscape.interpreters.foreground import ForegroundValue
from ansiscape.types import RGB, Attributes, Color


def eight_bit_colors() -> List[Tuple[int, RGB]]:
    return [
        (16, (0.0, 0.0, 0.0)),
        (17, (0.0, 0.0, 0.2)),
        (18, (0.0, 0.0, 0.4)),
        (19, (0.0, 0.0, 0.6)),
        (20, (0.0, 0.0, 0.8)),
        (21, (0.0, 0.0, 1.0)),
        (22, (0.0, 0.2, 0.0)),
        (23, (0.0, 0.2, 0.2)),
        (24, (0.0, 0.2, 0.4)),
        (25, (0.0, 0.2, 0.6)),
        (26, (0.0, 0.2, 0.8)),
        (27, (0.0, 0.2, 1.0)),
        (28, (0.0, 0.4, 0.0)),
        (29, (0.0, 0.4, 0.2)),
        (30, (0.0, 0.4, 0.4)),
        (31, (0.0, 0.4, 0.6)),
        (32, (0.0, 0.4, 0.8)),
        (33, (0.0, 0.4, 1.0)),
        (34, (0.0, 0.6, 0.0)),
        (35, (0.0, 0.6, 0.2)),
        (36, (0.0, 0.6, 0.4)),
        (37, (0.0, 0.6, 0.6)),
        (38, (0.0, 0.6, 0.8)),
        (39, (0.0, 0.6, 1.0)),
        (40, (0.0, 0.8, 0.0)),
        (41, (0.0, 0.8, 0.2)),
        (42, (0.0, 0.8, 0.4)),
        (43, (0.0, 0.8, 0.6)),
        (44, (0.0, 0.8, 0.8)),
        (45, (0.0, 0.8, 1.0)),
        (46, (0.0, 1.0, 0.0)),
        (47, (0.0, 1.0, 0.2)),
        (48, (0.0, 1.0, 0.4)),
        (49, (0.0, 1.0, 0.6)),
        (50, (0.0, 1.0, 0.8)),
        (51, (0.0, 1.0, 1.0)),
        (52, (0.2, 0.0, 0.0)),
        (53, (0.2, 0.0, 0.2)),
        (54, (0.2, 0.0, 0.4)),
        (55, (0.2, 0.0, 0.6)),
        (56, (0.2, 0.0, 0.8)),
        (57, (0.2, 0.0, 1.0)),
        (58, (0.2, 0.2, 0.0)),
        (59, (0.2, 0.2, 0.2)),
        (60, (0.2, 0.2, 0.4)),
        (61, (0.2, 0.2, 0.6)),
        (62, (0.2, 0.2, 0.8)),
        (63, (0.2, 0.2, 1.0)),
        (64, (0.2, 0.4, 0.0)),
        (65, (0.2, 0.4, 0.2)),
        (66, (0.2, 0.4, 0.4)),
        (67, (0.2, 0.4, 0.6)),
        (68, (0.2, 0.4, 0.8)),
        (69, (0.2, 0.4, 1.0)),
        (70, (0.2, 0.6, 0.0)),
        (71, (0.2, 0.6, 0.2)),
        (72, (0.2, 0.6, 0.4)),
        (73, (0.2, 0.6, 0.6)),
        (74, (0.2, 0.6, 0.8)),
        (75, (0.2, 0.6, 1.0)),
        (76, (0.2, 0.8, 0.0)),
        (77, (0.2, 0.8, 0.2)),
        (78, (0.2, 0.8, 0.4)),
        (79, (0.2, 0.8, 0.6)),
        (80, (0.2, 0.8, 0.8)),
        (81, (0.2, 0.8, 1.0)),
        (82, (0.2, 1.0, 0.0)),
        (83, (0.2, 1.0, 0.2)),
        (84, (0.2, 1.0, 0.4)),
        (85, (0.2, 1.0, 0.6)),
        (86, (0.2, 1.0, 0.8)),
        (87, (0.2, 1.0, 1.0)),
        (88, (0.4, 0.0, 0.0)),
        (89, (0.4, 0.0, 0.2)),
        (90, (0.4, 0.0, 0.4)),
        (91, (0.4, 0.0, 0.6)),
        (92, (0.4, 0.0, 0.8)),
        (93, (0.4, 0.0, 1.0)),
        (94, (0.4, 0.2, 0.0)),
        (95, (0.4, 0.2, 0.2)),
        (96, (0.4, 0.2, 0.4)),
        (97, (0.4, 0.2, 0.6)),
        (98, (0.4, 0.2, 0.8)),
        (99, (0.4, 0.2, 1.0)),
        (100, (0.4, 0.4, 0.0)),
        (101, (0.4, 0.4, 0.2)),
        (102, (0.4, 0.4, 0.4)),
        (103, (0.4, 0.4, 0.6)),
        (104, (0.4, 0.4, 0.8)),
        (105, (0.4, 0.4, 1.0)),
        (106, (0.4, 0.6, 0.0)),
        (107, (0.4, 0.6, 0.2)),
        (108, (0.4, 0.6, 0.4)),
        (109, (0.4, 0.6, 0.6)),
        (110, (0.4, 0.6, 0.8)),
        (111, (0.4, 0.6, 1.0)),
        (112, (0.4, 0.8, 0.0)),
        (113, (0.4, 0.8, 0.2)),
        (114, (0.4, 0.8, 0.4)),
        (115, (0.4, 0.8, 0.6)),
        (116, (0.4, 0.8, 0.8)),
        (117, (0.4, 0.8, 1.0)),
        (118, (0.4, 1.0, 0.0)),
        (119, (0.4, 1.0, 0.2)),
        (120, (0.4, 1.0, 0.4)),
        (121, (0.4, 1.0, 0.6)),
        (122, (0.4, 1.0, 0.8)),
        (123, (0.4, 1.0, 1.0)),
        (124, (0.6, 0.0, 0.0)),
        (125, (0.6, 0.0, 0.2)),
        (126, (0.6, 0.0, 0.4)),
        (127, (0.6, 0.0, 0.6)),
        (128, (0.6, 0.0, 0.8)),
        (129, (0.6, 0.0, 1.0)),
        (130, (0.6, 0.2, 0.0)),
        (131, (0.6, 0.2, 0.2)),
        (132, (0.6, 0.2, 0.4)),
        (133, (0.6, 0.2, 0.6)),
        (134, (0.6, 0.2, 0.8)),
        (135, (0.6, 0.2, 1.0)),
        (136, (0.6, 0.4, 0.0)),
        (137, (0.6, 0.4, 0.2)),
        (138, (0.6, 0.4, 0.4)),
        (139, (0.6, 0.4, 0.6)),
        (140, (0.6, 0.4, 0.8)),
        (141, (0.6, 0.4, 1.0)),
        (142, (0.6, 0.6, 0.0)),
        (143, (0.6, 0.6, 0.2)),
        (144, (0.6, 0.6, 0.4)),
        (145, (0.6, 0.6, 0.6)),
        (146, (0.6, 0.6, 0.8)),
        (147, (0.6, 0.6, 1.0)),
        (148, (0.6, 0.8, 0.0)),
        (149, (0.6, 0.8, 0.2)),
        (150, (0.6, 0.8, 0.4)),
        (151, (0.6, 0.8, 0.6)),
        (152, (0.6, 0.8, 0.8)),
        (153, (0.6, 0.8, 1.0)),
        (154, (0.6, 1.0, 0.0)),
        (155, (0.6, 1.0, 0.2)),
        (156, (0.6, 1.0, 0.4)),
        (157, (0.6, 1.0, 0.6)),
        (158, (0.6, 1.0, 0.8)),
        (159, (0.6, 1.0, 1.0)),
        (160, (0.8, 0.0, 0.0)),
        (161, (0.8, 0.0, 0.2)),
        (162, (0.8, 0.0, 0.4)),
        (163, (0.8, 0.0, 0.6)),
        (164, (0.8, 0.0, 0.8)),
        (165, (0.8, 0.0, 1.0)),
        (166, (0.8, 0.2, 0.0)),
        (167, (0.8, 0.2, 0.2)),
        (168, (0.8, 0.2, 0.4)),
        (169, (0.8, 0.2, 0.6)),
        (170, (0.8, 0.2, 0.8)),
        (171, (0.8, 0.2, 1.0)),
        (172, (0.8, 0.4, 0.0)),
        (173, (0.8, 0.4, 0.2)),
        (174, (0.8, 0.4, 0.4)),
        (175, (0.8, 0.4, 0.6)),
        (176, (0.8, 0.4, 0.8)),
        (177, (0.8, 0.4, 1.0)),
        (178, (0.8, 0.6, 0.0)),
        (179, (0.8, 0.6, 0.2)),
        (180, (0.8, 0.6, 0.4)),
        (181, (0.8, 0.6, 0.6)),
        (182, (0.8, 0.6, 0.8)),
        (183, (0.8, 0.6, 1.0)),
        (184, (0.8, 0.8, 0.0)),
        (185, (0.8, 0.8, 0.2)),
        (186, (0.8, 0.8, 0.4)),
        (187, (0.8, 0.8, 0.6)),
        (188, (0.8, 0.8, 0.8)),
        (189, (0.8, 0.8, 1.0)),
        (190, (0.8, 1.0, 0.0)),
        (191, (0.8, 1.0, 0.2)),
        (192, (0.8, 1.0, 0.4)),
        (193, (0.8, 1.0, 0.6)),
        (194, (0.8, 1.0, 0.8)),
        (195, (0.8, 1.0, 1.0)),
        (196, (1.0, 0.0, 0.0)),
        (197, (1.0, 0.0, 0.2)),
        (198, (1.0, 0.0, 0.4)),
        (199, (1.0, 0.0, 0.6)),
        (200, (1.0, 0.0, 0.8)),
        (201, (1.0, 0.0, 1.0)),
        (202, (1.0, 0.2, 0.0)),
        (203, (1.0, 0.2, 0.2)),
        (204, (1.0, 0.2, 0.4)),
        (205, (1.0, 0.2, 0.6)),
        (206, (1.0, 0.2, 0.8)),
        (207, (1.0, 0.2, 1.0)),
        (208, (1.0, 0.4, 0.0)),
        (209, (1.0, 0.4, 0.2)),
        (210, (1.0, 0.4, 0.4)),
        (211, (1.0, 0.4, 0.6)),
        (212, (1.0, 0.4, 0.8)),
        (213, (1.0, 0.4, 1.0)),
        (214, (1.0, 0.6, 0.0)),
        (215, (1.0, 0.6, 0.2)),
        (216, (1.0, 0.6, 0.4)),
        (217, (1.0, 0.6, 0.6)),
        (218, (1.0, 0.6, 0.8)),
        (219, (1.0, 0.6, 1.0)),
        (220, (1.0, 0.8, 0.0)),
        (221, (1.0, 0.8, 0.2)),
        (222, (1.0, 0.8, 0.4)),
        (223, (1.0, 0.8, 0.6)),
        (224, (1.0, 0.8, 0.8)),
        (225, (1.0, 0.8, 1.0)),
        (226, (1.0, 1.0, 0.0)),
        (227, (1.0, 1.0, 0.2)),
        (228, (1.0, 1.0, 0.4)),
        (229, (1.0, 1.0, 0.6)),
        (230, (1.0, 1.0, 0.8)),
        (231, (1.0, 1.0, 1.0)),
    ]


@mark.parametrize("attr, expect", eight_bit_colors())
def test_from_extended_attributes(attr: int, expect: RGB) -> None:
    cv = ForegroundValue()
    assert cv.from_extended_attributes([5, attr]) == ((*expect, 1), 2)


@mark.parametrize("attr, expect", eight_bit_colors())
def test_get_8_bit_rgb_color(attr: int, expect: RGB) -> None:
    assert ColorInterpreter.get_8_bit_rgb_color(attr) == expect


@mark.parametrize("attr", [15, 232])
def test_get_8_bit_rgb_color__out_of_range(attr: int) -> None:
    with raises(AttributeError):
        ColorInterpreter.get_8_bit_rgb_color(attr)


@mark.parametrize(
    "attr, expect",
    [
        (232, (0.04, 0.04, 0.04)),
        (233, (0.08, 0.08, 0.08)),
        (234, (0.12, 0.12, 0.12)),
        (235, (0.16, 0.16, 0.16)),
        (236, (0.2, 0.2, 0.2)),
        (237, (0.24, 0.24, 0.24)),
        (238, (0.28, 0.28, 0.28)),
        (239, (0.32, 0.32, 0.32)),
        (240, (0.36, 0.36, 0.36)),
        (241, (0.4, 0.4, 0.4)),
        (242, (0.44, 0.44, 0.44)),
        (243, (0.48, 0.48, 0.48)),
        (244, (0.52, 0.52, 0.52)),
        (245, (0.56, 0.56, 0.56)),
        (246, (0.6, 0.6, 0.6)),
        (247, (0.64, 0.64, 0.64)),
        (248, (0.68, 0.68, 0.68)),
        (249, (0.72, 0.72, 0.72)),
        (250, (0.76, 0.76, 0.76)),
        (251, (0.8, 0.8, 0.8)),
        (252, (0.84, 0.84, 0.84)),
        (253, (0.88, 0.88, 0.88)),
        (254, (0.92, 0.92, 0.92)),
        (255, (0.96, 0.96, 0.96)),
    ],
)
def test_get_8_bit_rgb_grey(attr: int, expect: RGB) -> None:
    assert ColorInterpreter.get_8_bit_rgb_grey(attr) == expect


@mark.parametrize("attr", [231, 256])
def test_get_8_bit_rgb_grey__out_of_range(attr: int) -> None:
    with raises(AttributeError):
        ColorInterpreter.get_8_bit_rgb_grey(attr)


@mark.parametrize(
    "attrs, expect",
    [
        # Transparent:
        ([38, 1], ((0, 0, 0, 0), 2)),
        # 24-bit RGB colour:
        ([38, 2, 0, 0, 0], ((0, 0, 0, 1), 5)),
        # 8-bit named colour:
        ([38, 5, 1], (NamedColor.RED, 3)),
        # 8-bit RGB:
        ([38, 5, 232], ((0.04, 0.04, 0.04, 1.0), 3)),
    ],
)
def test_value(attrs: Attributes, expect: Tuple[Optional[Color], int]) -> None:
    cv = ForegroundValue()
    assert cv.from_attributes(attrs) == expect


@mark.parametrize(
    "attrs, expect",
    [
        ([38, 0], "ansiscape has no custom color scheme (attributes=[0])"),
        ([38, 3], "Cyan-Magenta-Yellow not supported (attributes=[3])"),
        ([38, 4], "Cyan-Magenta-Yellow-Black not supported (attributes=[4])"),
    ],
)
def test_value__invalid(attrs: Attributes, expect: str) -> None:
    with raises(AttributeError) as ex:
        ForegroundValue().from_attributes(attrs)
    assert str(ex.value) == expect


@mark.parametrize(
    "attrs, expect",
    [
        ([0, 0, 0], (0, 0, 0)),
        ([255, 255, 255], (1, 1, 1)),
    ],
)
def test_get_24_bit_rgb(attrs: Attributes, expect: RGB) -> None:
    assert ColorInterpreter.get_24_bit_rgb(attrs) == expect


@mark.parametrize(
    "attrs, expect",
    [
        ([], "non-colors are not supported"),
        ([0], "color spaces are not supported"),
        ([0, 1], "unexpected sequence"),
        ([0, 1, 2, 3, 4], "color spaces are not supported"),
    ],
)
def test_get_24_bit_rgb__fail(attrs: Attributes, expect: str) -> None:
    with raises(AttributeError) as ex:
        ColorInterpreter.get_24_bit_rgb(attrs)
    assert str(ex.value) == f"{expect} (attributes={attrs})"
